

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>

void sameProgSameCode() {
    printf("Same program, same code\n");
}

void sameProgDiffCode() {
    printf("Same program, different code\n");
}

int main() {
    pid_t pid;

    // i. Same program, same code
    pid = fork();
    if (pid == 0) {
        // Child process
        sameProgSameCode();
        exit(0);
    } else if (pid > 0) {
        // Parent process
        wait(NULL);
    } else {
        perror("Error in fork()");
        exit(EXIT_FAILURE);
    }

    // ii. Same program, different code
    pid = fork();
    if (pid == 0) {
        // Child process
        sameProgDiffCode();
        exit(0);
    } else if (pid > 0) {
        // Parent process
        wait(NULL);
    } else {
        perror("Error in fork()");
        exit(EXIT_FAILURE);
    }

    // iii. Before terminating, the parent waits for the child to finish its task
    pid = fork();
    if (pid == 0) {
        // Child process
        printf("Child process is working\n");
        sleep(2); // Simulating some work
        printf("Child process finished\n");
        exit(0);
    } else if (pid > 0) {
        // Parent process
        wait(NULL);
        printf("Parent process: Child has finished its task.\n");
    } else {
        perror("Error in fork()");
        exit(EXIT_FAILURE);
    }

    return 0;
}





output:--
Parent process: Child has finished its task.=== MENU =
(1) same program, same code
(2) same program, different code
(3) the parent waits for the child
(0) exit
Enter Choice: 3
Shell PID: 2424
PARENT: Child Exited
CHILD: Parent Process ID: 2453
CHILD: Process ID: 2469
